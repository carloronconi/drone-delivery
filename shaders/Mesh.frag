#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(set = 0, binding = 0) uniform GlobalUniformBufferObject {	vec3 DlightDir;		// direction of the direct light	vec3 DlightColor;	// color of the direct light	vec3 AmbLightColor;	// ambient light	vec3 eyePos;		// position of the viewer} gubo;layout(set = 1, binding = 0) uniform UniformBufferObject {	float amb;	float gamma;	vec3 sColor;	mat4 mvpMat;	mat4 mMat;	mat4 nMat;} ubo;layout(set = 1, binding = 1) uniform sampler2D tex;/*DIRECT LIGHTvec3 lightDir = gubo.lightDir;vec3 lightColor = gubo.lightColor.rgb;POINT LIGHTvec3 lightDir = normalize(gubo.eyePos - fragPos);vec3 lightColor = vec3(gubo.lightColor) * pow((g / length(gubo.eyePos - fragPos)), beta);SPOT LIGHTvec3 lightDir = normalize(gubo.eyePos - fragPos);vec3 arg = (normalize(gubo.eyePos - fragPos) * gubo.lightDir - cosout) / (cosin - cosout);vec3 lightColor = vec3(gubo.lightColor) * pow((g / length(gubo.eyePos - fragPos)), beta) * clamp(arg, cosout, cosin);BRDF diffuse - LambertBRDF specular - PhongBRDF specular - Blinn*/void main() {	// DIRECT LIGHT	vec3 lightDir = normalize(gubo.DlightDir);	vec3 lightColor = gubo.DlightColor.rgb;	// LAMBERT - BRDF diffuse reflection	vec3 normal = normalize(fragNorm);	vec3 diffuseColor = texture(tex, fragUV).rgb; // AKA mD - surface diffuse color	vec3 diffuse = diffuseColor * clamp(dot(lightDir, normal), 0.0f, 1.0f);	// PHONG - BRDF specular reflection	vec3 specularColor = ubo.sColor; // AKA mS - should be vec3(1) for standard object or = diffuseColor for metallic objects	vec3 eyeDir = normalize(gubo.eyePos - fragPos); // AKA V, omegaR	vec3 reflectDirection = - reflect(lightDir, normal); // direction of the reflected ray	vec3 specular = specularColor * pow(clamp(dot(eyeDir, reflectDirection), 0.0f, 1.0f), ubo.gamma);	// ADDING EVERYTHING	vec3 mAmbient;	vec3 lAmbient;	vec3 ambient = lAmbient * mAmbient;	outColor = vec4(clamp((diffuse + specular) * lightColor + ambient,0.0,1.0), 1.0f);	/*	vec3 N = normalize(fragNorm);				// surface normal	vec3 V = normalize(gubo.eyePos - fragPos);	// viewer direction	vec3 L = normalize(gubo.DlightDir);			// light direction												// ADDITIONAL COMMENTS BY ME	vec3 albedo = texture(tex, fragUV).rgb;		// main color from the texture's UV coord	vec3 MD = albedo;							// diffuse	vec3 MS = ubo.sColor;						// specular	vec3 MA = albedo * ubo.amb;					// ambient	vec3 LA = gubo.AmbLightColor;		// Write the shader here	// ADDITIONAL COMMENTS BY ME	// direct light	// Phong smooth shading	// BRDF: diffuse = Lambert + specular = Bilnn	outColor = vec4(				clamp(MD * clamp(dot(L,N),0.0f,1.0f) +					  MS * pow(clamp(dot(N, normalize(L + V)), 0.0f, 1.0f), ubo.gamma) +					  LA * MA,				0.0f, 1.0f), 1.0f); // output color		*/	// equivalent to: outColor = vec4(clamp(diffuse + specular + ambient,0.0,1.0), 1.0f);	// which is same as mine but missinng lightColor, as it's set at vec3(1) in Game.cpp}